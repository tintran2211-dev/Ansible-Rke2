---
- name: Create multiple Talos OS VMs on Proxmox
  hosts: localhost
  gather_facts: no

  vars:
    api_url: "https://192.168.3.10:8006/api2/json"
    api_user: "tint"
    api_password: "12345678"
    node: "pve"
    vm_os: "l26"  # Giá trị hợp lệ cho Linux
    vm_disk_size: 32
    vm_memory: 2048
    vm_cores: 2
    vm_cpu_type: "x86-64-v2-AES"  # Loại CPU
    num_vms: 30  # Số lượng máy ảo muốn tạo
    base_vm_id: 120  # ID cơ bản để tạo các VM, sẽ tăng dần
    base_ip_address: "192.168.1.100"  # Địa chỉ IP cơ bản để tạo các VM, sẽ tăng dần

  tasks:
    - name: Get Proxmox API ticket
      uri:
        url: "{{ api_url }}/access/ticket"
        method: POST
        body_format: form-urlencoded
        body:
          username: "{{ api_user }}"
          password: "{{ api_password }}"
          realm: "pve"
        headers:
          Content-Type: application/x-www-form-urlencoded
        validate_certs: no
      register: login_response
      failed_when: login_response.status != 200
      retries: 3
      delay: 5

    - name: Fail if login unsuccessful
      fail:
        msg: "Failed to authenticate with Proxmox API"
      when: login_response.status != 200

    - name: Create VMs
      uri:
        url: "{{ api_url }}/nodes/{{ node }}/qemu"
        method: POST
        headers:
          Content-Type: application/json
          Cookie: "PVEAuthCookie={{ login_response.json.data.ticket }}"
          CSRFPreventionToken: "{{ login_response.json.data.CSRFPreventionToken }}"
        body_format: json
        body: |
          {
            "vmid": {{ base_vm_id + item }},
            "name": "TalosVM{{ base_vm_id + item }}",
            "ostype": "{{ vm_os }}",
            "ide2": "local:iso/metal-amd64.iso,media=cdrom",
            "cores": {{ vm_cores }},
            "memory": {{ vm_memory }},
            "net0": "virtio,bridge=vmbr0,ip={{ base_ip_address | ipaddr(item) }}/16",
            "gw": "192.168.1.1",
            "onboot": true,
            "scsihw": "virtio-scsi-pci",
            "bootdisk": "scsi0",
            "scsi0": "local-lvm:{{ vm_disk_size }}",
            "cpu": "{{ vm_cpu_type }}"
          }
        validate_certs: no
      register: create_vm_response
      loop: "{{ range(num_vms)|list }}"
      failed_when: create_vm_response.status != 200

    - name: Fail if creating any VM failed
      fail:
        msg: "Failed to create one or more VMs"
      when: create_vm_response is failed
